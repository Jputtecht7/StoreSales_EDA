---
title: "StoreSales_EDA"
format: html
editor: visual
---

```{r}
library(readr)
library(ggplot2)
library(plotly)
library(dplyr)
```

```{r}
holidays_events <- read_csv("store-sales-time-series-forecasting/holidays_events.csv")
oil <- read_csv("store-sales-time-series-forecasting/oil.csv")
sample_submission <- read_csv("store-sales-time-series-forecasting/sample_submission.csv")
test <- read_csv("store-sales-time-series-forecasting/test.csv")
train <- read_csv("store-sales-time-series-forecasting/train.csv")
transactions <- read_csv("store-sales-time-series-forecasting/transactions.csv")
stores <- read_csv("store-sales-time-series-forecasting/stores.csv")
```

### Train Data

#### Sales Vs. On promotion

```{r}
# Show correlation between sales and on promotion for each type of prodcut
train_subset <- train %>%
  group_by(family) %>%
  slice_sample(n = 1000, replace = FALSE) %>% # Randomly select up to 1000 rows per product
  ungroup()

plot_family <- function(family_name) {
  family_data <- subset(train_subset, family == family_name)  # Filter data for the products
  
  ggplot(family_data, aes(x = onpromotion, y = sales)) +
    geom_point(color = "blue", size = 2, alpha = 0.7) +
    geom_smooth(method = "lm", color = "red", se = FALSE) + # Add linear regression line
    labs(
      title = paste("Correlation between Total Sales and Promotions for", family_name),
      x = "Items Promoted (onpromotion)",
      y = "Total Sales"
    ) +
    theme_minimal()
}

# Generate plots for each product
unique_items <- unique(train_subset$family)

sales.onpromotion <- lapply(unique_items, function(family) {
  plot_family(family)  # Generate plot for each family
})

# Display all plots
sales.onpromotion
```

### Sales for each product compared over store number

```{r}
plot_sales_by_family <- function(train, family_type) {
  # Filter data for the given family type and calculate total sales by store
  filtered_data <- train %>%
    filter(family == family_type) %>%
    group_by(store_nbr) %>%
    summarise(total_sales = sum(sales, na.rm = TRUE), .groups = "drop")
  
  # Create the ggplot
  p <- ggplot(filtered_data, aes(x = factor(store_nbr), y = total_sales)) +
    geom_bar(stat = "identity", fill = "skyblue", color = "black") +
    labs(
      title = paste("Total Sales for", family_type, "Family by Store"),
      x = "Store Number",
      y = "Total Sales"
    ) +
    theme_minimal()
  
  # Convert to an interactive plotly plot
  ggplotly(p)
}

unique_families <- unique(train$family)
plots <- lapply(unique_families, function(family) {
  plot_sales_by_family(train, family)
})

# Display the plot for the first family
plots
```

```{r}
ggplot(holidays_events, aes(x = date, y = type, color = type)) +
  geom_point(size = 2) +
  labs(
    title = "Holidays from 2012 to 2017",
    x = "Date",
    y = "Holiday Type"
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```

```{r}
ggplot(stores, aes(x = type, y = store_nbr, fill = type)) +
  geom_boxplot() +
  labs(
    title = "Distribution of Store Numbers by Type",
    x = "Store Type",
    y = "Store Number"
  ) +
  theme_minimal() +
  theme(legend.position = "none")
```
